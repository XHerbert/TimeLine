@using TimeLine.Models
@model List<TimeLineModel>
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link href="~/Scripts/layui/css/layui.css" rel="stylesheet" />
    <title>LineList</title>
</head>
<body>
    @*<div id="particles-js"></div>*@
    <div style="width:95%;margin:20px auto">
        <table id="dataTable" lay-filter="dataTb"></table>
        <script src="~/Scripts/layui/layui.js"></script>
        <script src="~/Scripts/lib/datefmt.js"></script>
        <link href="~/Content/particlesjs.css" rel="stylesheet" />
        <script src="~/Scripts/lib/particles.min.js"></script>
        <script src="~/Scripts/lib/particlesJS.js"></script>
        <script>
            layui.use('table', function () {
                var table = layui.table;
                table.render({
                    elem: '#dataTable'
                  , height: 'full-50'
                  , skin:'nob'
                  , even:true
                  , url: '/Admin/AjaxLineList'
                  , loading: true
                  , page: true  
                  , cols: [[  
                    { field: 'Id', title: 'Id', sort: true, width: 80, templet: function (d) { return d.Id }, fixed: 'left' }
                    , { field: 'TitleYear', title: '年', width: 80, sort: true }
                    , { field: 'TitleMonth', title: '月', width: 80}
                    , { field: 'TitleDay', title: '日', width: 80 }
                    , { field: 'Copy', title: '背景' }
                    , { field: 'Images', title: '地址', width: 400 }
                    , {
                        field: 'CreateTime', title: '创建时间',  width: 180,
                        templet: function (d) {
                            var stamp = d.CreateTime.replace(/[^0-9]/ig, "");
                            var date = new Date();
                            date.setTime(stamp);
                            return date.Format("yyyy-MM-dd hh:mm:ss");
                        }
                    }
                    , {
                        field: 'UpdateTime', title: '修改时间', width: 180,
                        templet: function (d) {
                            var stamp = d.UpdateTime.replace(/[^0-9]/ig, "");
                            var date = new Date();
                            date.setTime(stamp);
                            return date.Format("yyyy-MM-dd hh:mm:ss");
                        }
                    }
                    , {
                        field: 'IsDeleted', title: '有效',  width: 80,
                        templet: function (d) {
                            if (d.IsDeleted == true) {
                                return '无效'
                            } else {
                                return '有效'
                            }
                        }, style: "color:#5FB878 ;"
                    },
                    { fixed: 'right', title:"操作",width: 250, align: 'center', toolbar: '#barDemo' }
                  ]]
                });
            });

 
        </script>
        <script type="text/html" id="barDemo">
            <a class="layui-btn layui-btn layui-btn-xs" lay-event="detail">查看图像</a>
            <a class="layui-btn layui-btn-warm layui-btn-xs" lay-event="edit">编辑</a>
            <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del">删除</a>

            <!-- 这里同样支持 laytpl 语法，如： -->
            {{#  if(d.Id > 2){ }}
            @*<a class="layui-btn layui-btn-xs" lay-event="check">查看图像</a>*@
            {{#  } }}
        </script>

        <script>
            layui.use('table', function () {
                var table = layui.table;
                table.on('tool(dataTb)', function (obj) { //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
                    var data = obj.data; //获得当前行数据
                    var layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）
                    var tr = obj.tr; //获得当前行 tr 的DOM对象

                    if (layEvent === 'detail') { //查看
                        layer.msg("detail");
                    } else if (layEvent === 'del') { //删除
                        layer.confirm('真的删除行么', function (index) {
                            obj.del(); //删除对应行（tr）的DOM结构，并更新缓存
                            layer.close(index);
                            //向服务端发送删除指令
                        });
                    } else if (layEvent === 'edit') { //编辑
                     
                        layer.msg("edit");
                        //同步更新缓存对应的值
                        obj.update({
                            username: '123'
                          , title: 'xxx'
                        });
                    }
                });
            });  
        </script>
    </div>
</body>
</html>
